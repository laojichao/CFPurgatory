<?xml version="1.0" encoding="UTF-8"?>
<!--  status="warn": 日志框架本身的输出日志级别, 默认是warn。日志框架本身的日志输出到控制台 -->
<!-- monitorInterval="5"：自动加载log4j2.xml文件的时间间隔， -->
<Configuration status="warn" monitorInterval="5">

    <!-- 定义属性，供其它标签引用。引用方式${name} -->
    <properties>
        <property name="LOG_HOME">./logs</property>
    </properties>

    <!-- 日志处理器 -->
    <Appenders>
        <!-- 控制台输出appender。可选值：SYSTEM_OUT、SYSTEM_ERR -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--
            %d{yyyy-MM-dd HH:mm:ss.SSS}: 日志日期及其格式
            %t/%thread: 日志执行的线程
            %-5level: 日志级别输出占5个字符，左对其
            %c{36}: 日志执行的类的全限定名, 深度为36
            %M: 日志执行的方法名
            %L: 日志执行的具体行号
            %l: 日志执行的位置信息
            %m/%msg: 日志的消息
            %n: 换行符
            -->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%-5level] %l --- %msg%n" />
        </Console>

        <!-- 日志文件输出appender -->
        <File name="File" fileName="${LOG_HOME}/Log.log">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%-5level] %l --- %msg%n" />
        </File>

        <!-- 使用随机读写流的日志文件输出appender，性能高 -->
<!--        <RandomAccessFile name="RandomAccessFile" fileName="${LOG_HOME}/AccessFile.log">-->
<!--            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%-5level] %l -&#45;&#45; %msg%n" />-->
<!--        </RandomAccessFile>-->

        <!-- 按照一定规则拆分日志文件的appender -->
        <!-- filePattern: 拆分后的文件名。拆分规则如下：
        以天为单位，拆分成文件夹
        一天内按照分钟为单位生成一个日志文件。和policy的TimeBasedTriggeringPolicy对应
        日志文件到达指定大小，再按照指定大小进行拆分，文件序号从1开始递增。和policy的SizeBasedTriggeringPolicy对应
        -->
<!--        <RollingFile name="RollingFile" fileName="${LOG_HOME}/RollingFile.log" filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/myRollingFile-%d{yyyy-MM-dd-HH-mm}-%i.log">-->
<!--            &lt;!&ndash; 日志级别过滤器。高于等于debug级别的(比如info)进行日志记录，低于debug级别的进行拦截 &ndash;&gt;-->
<!--            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />-->
<!--            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%-5level] %l -&#45;&#45; %msg%n" />-->
<!--            &lt;!&ndash; 日志消息拆分的规则 &ndash;&gt;-->
<!--            <Policies>-->
<!--                &lt;!&ndash; 在系统启动时，进行拆分，生成一个新的日志文件进行新日志消息的记录。原来的日志文件按照日志记录时间(非启动时间)归档成一个新的归档日志文件 &ndash;&gt;-->
<!--                <OnStartupTriggeringPolicy />-->
<!--                &lt;!&ndash; 按照文件大小进行拆分 &ndash;&gt;-->
<!--                <SizeBasedTriggeringPolicy size="10 MB" />-->
<!--                &lt;!&ndash; 按照时间间隔拆分，规则根据filePattern定义的 &ndash;&gt;-->
<!--                <TimeBasedTriggeringPolicy />-->
<!--            </Policies>-->
<!--            &lt;!&ndash; 在同一分钟下，文件的个数限定为30个，超过则进行滚动覆盖(文件序号最大为30) &ndash;&gt;-->
<!--            <DefaultRolloverStrategy max="30" />-->
<!--        </RollingFile>-->
    </Appenders>

    <Loggers>
        <!-- 配置日志级别 -->
        <Root level="INFO">
            <!-- 指定日志输出appender。不指定File、RandomAccessFile、RollingFile，也会创建空日志文件 -->
            <AppenderRef ref="Console" />
            <!--            是否输出到文件-->
            <AppenderRef ref="File"/>
            <!--            <AppenderRef ref="RandomAccessFile"/>-->
            <!--            <AppenderRef ref="RollingFile"/>-->
        </Root>
    </Loggers>
</Configuration>
